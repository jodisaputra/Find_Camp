plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
    id("com.google.gms.google-services")
}

// Load keystore properties
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.example.find_camp"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    // Add signing configs
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    defaultConfig {
        applicationId = "com.example.find_camp"
        // Set minSdkVersion to 23
        minSdkVersion 23 // Changed here
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutter.versionCode
        versionName flutter.versionName
    }

    dependencies {
        // Import the Firebase BoM
        implementation(platform("com.google.firebase:firebase-bom:33.7.0"))

        // TODO: Add the dependencies for Firebase products you want to use
        // When using the BoM, don't specify versions in Firebase dependencies
        implementation("com.google.firebase:firebase-analytics")
        
        // Add Google Play Services Auth
        implementation 'com.google.android.gms:play-services-auth:20.7.0'

        // Add the dependencies for any other desired Firebase products
        // https://firebase.google.com/docs/android/setup#available-libraries
    }
    
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source = "../.."
}

task printDebugSigningReport {
    doLast {
        def debugKeystore = android.signingConfigs.debug.storeFile
        if (debugKeystore != null) {
            exec {
                commandLine 'keytool', '-list', '-v',
                        '-keystore', debugKeystore,
                        '-alias', android.signingConfigs.debug.keyAlias,
                        '-storepass', android.signingConfigs.debug.storePassword,
                        '-keypass', android.signingConfigs.debug.keyPassword
            }
        }
    }
}

task printReleaseSigningReport {
    doLast {
        def releaseKeystore = file('my-release-key.jks')
        if (releaseKeystore.exists()) {
            exec {
                workingDir 'app'
                commandLine 'keytool', '-list', '-v',
                        '-keystore', 'my-release-key.jks',
                        '-alias', 'upload',  // Ganti dengan alias keystore Anda
                        '-storepass', 'your_keystore_password',  // Ganti dengan password keystore Anda
                        '-keypass', 'your_key_password'  // Ganti dengan password key Anda
            }
        }
    }
}

// Task untuk mendapatkan SHA-1 menggunakan Java dari Android SDK
task getReleaseSha1 {
    doLast {
        def keystoreFile = file('my-release-key.jks')
        if (keystoreFile.exists()) {
            def javaHome = System.getenv('JAVA_HOME')
            def androidHome = System.getenv('ANDROID_HOME')
            
            if (androidHome) {
                def keytoolPath = new File(androidHome, 'jre/bin/keytool').absolutePath
                if (new File(keytoolPath).exists()) {
                    println "Mencoba mendapatkan SHA-1 menggunakan keytool dari Android SDK..."
                    exec {
                        commandLine keytoolPath, '-list', '-v',
                                '-keystore', keystoreFile.absolutePath,
                                '-alias', 'upload'
                    }
                } else {
                    println "Keytool tidak ditemukan di Android SDK. Silakan gunakan Android Studio:"
                    println "1. Buka Android Studio"
                    println "2. Buka project Find_Camp"
                    println "3. Di panel kanan, klik icon Gradle (icon gajah)"
                    println "4. Expand: Find_Camp > Tasks > android"
                    println "5. Double click pada 'signingReport'"
                }
            } else {
                println "ANDROID_HOME tidak ditemukan. Silakan gunakan Android Studio:"
                println "1. Buka Android Studio"
                println "2. Buka project Find_Camp"
                println "3. Di panel kanan, klik icon Gradle (icon gajah)"
                println "4. Expand: Find_Camp > Tasks > android"
                println "5. Double click pada 'signingReport'"
            }
        } else {
            println "Keystore tidak ditemukan di: ${keystoreFile.absolutePath}"
            println "Pastikan file my-release-key.jks ada di folder android/app/"
        }
    }
}